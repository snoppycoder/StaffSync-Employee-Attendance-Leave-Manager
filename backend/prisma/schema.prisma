// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLOYEE
  MANAGER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum EmploymentType {
  PERMANENT
  CONTRACTUAL
  INTERNSHIP
}

enum LeaveType {
  SICK
  VACATION
  PERSONAL
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      Role     @default(EMPLOYEE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  profile   Profile?
  leaveRequests LeaveRequest[]
  attendance Attendance[]
}

model Profile {
  id             Int            @id @default(autoincrement())
  fullName       String
  gender         Gender
  employmentType EmploymentType
  designation    String

  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  dateOfBirth DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model LeaveRequest {
  id        Int        @id @default(autoincrement())
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  type      LeaveType
  startDate DateTime
  endDate   DateTime
  reason    String
  status    LeaveStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Attendance {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime @unique
  checkIn   DateTime
  checkOut  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}